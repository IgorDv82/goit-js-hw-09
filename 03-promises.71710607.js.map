{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,oBAG1BK,EAAQ,EACRC,EAAO,EACPC,EAAS,EA0Bb,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUR,MAAAS,IAEpBM,EAAO,CAAEP,WAAUR,MAAAS,G,GAEpBA,E,IAIPb,EAAKC,KAAKoB,iBAAiB,UArC3B,SAAkBC,GAChBA,EAAEC,iBACFf,EAAQgB,SAASxB,EAAKI,MAAMqB,OAC5BhB,EAAOe,SAASxB,EAAKK,KAAKoB,OAC1Bf,EAASc,SAASxB,EAAKM,OAAOmB,OAC9B,IAAK,IAAIC,EAAW,EAAGA,GAAYhB,EAAQgB,GAAY,EACrDf,EAAce,EAAUlB,GACrBmB,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUiB,EAAKD,EAALxB,MACjBN,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANH,EAAM,MAAK,CAC9DjB,SAAQ,YACVqB,QAAS,K,IAGZC,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUuB,EAAKP,EAALxB,MAClBN,EAAAgC,OAAOM,QAAQ,sBAAqCJ,OAAfpB,EAAS,QAAYoB,OAANG,EAAM,MAAK,CAC7DvB,SAAU,YACVqB,QAAS,K,IAGfzB,GAASC,EAEXT,EAAKC,KAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('[type=\"submit\"]'),\n};\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n\nfunction saveData(e) {\n  e.preventDefault();\n  delay = parseInt(refs.delay.value);\n  step = parseInt(refs.step.value);\n  amount = parseInt(refs.amount.value);\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          position: 'right-top',\n          timeout: 3000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          position: 'right-top',\n          timeout: 3000,\n        });\n      });\n    delay += step;\n  }\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.form.addEventListener('submit', saveData);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","btn","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","parseInt","value","position1","then","param","delay1","Notify","success","concat","timeout","catch","delay2","failure","reset"],"version":3,"file":"03-promises.71710607.js.map"}