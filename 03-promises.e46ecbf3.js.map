{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,oBAG9B,IAAIK,EAAQ,EACRC,EAAO,EACPC,EAAS,EA0Bb,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUR,MAAAS,IAEpBM,EAAO,C,SAAEP,EAAUR,MAAAS,GAAQ,GAE5BA,EAAM,G,CAIbb,EAAKC,KAAKoB,iBAAiB,UArC3B,SAAkBC,GAChBA,EAAEC,iBACFf,EAAQgB,SAASxB,EAAKI,MAAMqB,OAC5BhB,EAAOe,SAASxB,EAAKK,KAAKoB,OAC1Bf,EAASc,SAASxB,EAAKM,OAAOmB,OAC9B,IAAK,IAAIC,EAAW,EAAGA,GAAYhB,EAAQgB,GAAY,EACrDf,EAAce,EAAUlB,GACrBmB,MAAK,EAACf,SAAEA,EAAUR,MAAAwB,MACjB9B,EAAA+B,OAAOC,QAAQ,uBAAqBlB,QAAiBgB,MAAW,CAC5DhB,SAAQ,YACVmB,QAAS,KACT,IAEHC,OAAM,EAACpB,SAAEA,EAAUR,MAAA6B,MAClBnC,EAAA+B,OAAOK,QAAQ,sBAAoBtB,QAAeqB,MAAW,CAC3DrB,SAAU,YACVmB,QAAS,KACT,IAENvB,GAASC,EAEXT,EAAKC,KAAKkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('[type=\"submit\"]'),\n};\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n\nfunction saveData(e) {\n  e.preventDefault();\n  delay = parseInt(refs.delay.value);\n  step = parseInt(refs.step.value);\n  amount = parseInt(refs.amount.value);\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          position: 'right-top',\n          timeout: 3000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          position: 'right-top',\n          timeout: 3000,\n        });\n      });\n    delay += step;\n  }\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.form.addEventListener('submit', saveData);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","btn","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","parseInt","value","position1","then","delay1","Notify","success","timeout","catch","delay2","failure","reset"],"version":3,"file":"03-promises.e46ecbf3.js.map"}